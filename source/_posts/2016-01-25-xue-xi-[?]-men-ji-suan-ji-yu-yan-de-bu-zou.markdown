---
layout: post
title: "学习一门计算机语言的步骤"
date: 2016-01-25 11:05:44 +0800
comments: true
categories: 其他
---

>你是否也有这样的困惑？当你学习在开发遇到瓶颈，想要在原有基础上扩展你的知识面，想要学习一门新的语言的时候，总感觉不知该怎么下手，然后拿本语法书从头到尾的去看基础语法-高级语法。但是过段时间之后再回忆你学过的语言的知识时，又感觉什么都没看，因为没有任何逻辑可言，同时因为跟现在的知识体系发生了冲突。感觉用起来很不自然。其实每门语言都有它的内在规律，怎么样系统的，有逻辑的去学一门计算机语言，我总结了一些浅薄的东西，希望能引起大家的思路，交流提出更多更好的学习新语言的法门。

<!--more-->

只要分四大步来学习：  
第一步：了解语言的一些作用，使用的场合，需要的基础，使用的流程  
第二步：学习语言的语法以及与操作系统之间的关联操作  
第三步：学习语言的内部以及外部调用  
第四步：阶段性的Demo，综合性的Demo，主题编程

接下来我们详细的解释一下每一步的具体操作  
<br/>
首先了解语言的一些作用，比如脚本语言可以作为独立应用脚本、游戏开发脚本、web开发脚本等，主体语言可以是创造出来什么样的东西，如oc可以创建iOS程序等等，有了这个认识之后，需要去知道什么样的场合需要用到这样的语言。比如lua，具我了解，可以作为oc的外嵌语言，起到原生程序动态修改部分内容的作用。这样，lua就可以作为ios程序的独立应用脚本，这就有了学习这门语言的原动力，然后就是需要的基础，学习这门语言需要怎么样的基本，比如oc是基于c语言的，那么学习oc的时候，最好有一些c的基础，开发的环境，需要什么样的软硬件支持，使用的流程，比如怎么样去写一个oc程序，这些都需要有一些最基本的了解。  
<br/>

其次是语言语法部分以及与操作系统的关联操作，  
语言语法部分基本可以分为基本语法、变量、表达式、控制语句、函数、高级语法等部分  
基本语法包括关键字、注释、基本输出等部分  
高级语法包括文件IO，线程，数据库访问、错误信息处理、垃圾回收、是否面向对象、对系统的访问以及操控等  
<br/>

接着就是程序的内部调用，也可以说是内部通信，怎么样在一个文件中调用另一个文件，怎么样进行数据的共享等等，以及对动态库、静态库、以及数据库等的访问方式，还有就是与可能的其他语言的连接方式，怎么样做到统一、兼容。  
<br/>

最后需要做的就是通过阶段性Demo来综合性理解部分难以理解语法的运用。通过综合性的Demo来灵活运用语法，通过主题编程来尝试命题作文，来练习自己在整个语法过程中对语法的熟悉度。

下面运用一张思维图来概括
![实例图1](http://7xopon.com1.z0.glb.clouddn.com/2016012501.png)


