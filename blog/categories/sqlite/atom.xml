<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sqlite | 谁在弹一曲东风破]]></title>
  <link href="http://macro44.github.io/blog/categories/sqlite/atom.xml" rel="self"/>
  <link href="http://macro44.github.io/"/>
  <updated>2016-03-29T15:15:42+08:00</updated>
  <id>http://macro44.github.io/</id>
  <author>
    <name><![CDATA[Macro]]></name>
    <email><![CDATA[macro_zj@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sqlite系统化学习之基础语法]]></title>
    <link href="http://macro44.github.io/blog/2015/12/21/sqlitexi-tong-hua-xue-xi-zhi-ji-chu-yu-fa/"/>
    <updated>2015-12-21T15:07:31+08:00</updated>
    <id>http://macro44.github.io/blog/2015/12/21/sqlitexi-tong-hua-xue-xi-zhi-ji-chu-yu-fa</id>
    <content type="html"><![CDATA[<blockquote><p>之前在项目中使用sqlite的时候，都是使用现成的基本框架，没有具体细致的去了解sqlite的从无到有的使用，最近有时间看一下sqlite语法，分为两个部分来总结一下sqlite的语法，第一部分主要用来写一些sqlite语法。主要分为两篇，这是之一，基础语法篇，还有一篇高级语法篇。第二部分用来分析在iOS项目中sqlite框架的构成，以及基本使用。</p></blockquote>

<!--more-->


<p>本教程目录：</p>

<script>
function alertWarming(){
    alert("因为本部分在iOS上用不上，所以忽略！");
}
function backToMenu(){
    window.scrollTo(0,100);
}

function mOver(obj){
    var x=document.getElementById("dataList");
    x.style.visibility='visible';
}

function mOut(obj){
    var x=document.getElementById("dataList");
    x.style.visibility='hidden';
}
</script>




<dl>
    <dt><a href=#1.1>1. SQLite数据类型</a></dt>
        <dd><a href=#1.1>1.1 SQLite存储类</a><br/>    
            <a href=#1.2>1.2 Boolean数据类型</a><br/>
            <a href=#1.3>1.3 Date与Time数据类型</a><br/>
            <a href=#1.4>1.4 SQLite 亲和(Affinity)类型</a>
        </dd>
    <dt><a href=#2.1 onclick="alertWarming()">2. SQLite数据库</a><br/></dt>
        <dd><a href=#2.1 onclick="alertWarming()">2.1 SQLite创建数据库</a><br/>
            <a href=#2.2 onclick="alertWarming()">2.2 SQLite关联数据库</a><br/>
            <a href=#2.3 onclick="alertWarming()">2.3 SQLite分离数据库</a>
        </dd>
        
    <dt><a href=#3.1>3. SQLite 表</a><br/></dt>
        <dd><a href=#3.1>3.1 SQLite创建表</a></br>
            <a href=#3.2>3.2 SQLite删除表</a>
        </dd>
        
    <dt><a href=#4.1>4. SQLite 运算符</a></dt>
        <dd><a href=#4.1>4.1 算数运算符</a><br/>
            <a href=#4.2>4.2 比较运算符</a><br/>
            <a href=#4.3>4.3 逻辑运算符</a><br/>
            <a href=#4.4>4.4 位运算符</a>
        </dd>
    </dt>   
    
    <dt><a href=#5.1>5. SQLite 表达式</a></dt>
        <dd><a href=#5.1>5.1 基本查询语句</a><br/>
            <a href=#5.2>5.2 布尔表达式</a><br/>
            <a href=#5.3>5.3 数值表达式</a><br/>
            <a href=#5.4>5.4 日期表达式</a><br/>
        </dd>
        
    <dt><a href=#6.1>6. SQLite 关键字子句</a></dt>
        <dd><a href=#6.1>6.1 Where子句</a><br/>
            <a href=#6.2>6.2 And/Or子句</a><br/>
            <a href=#6.3>6.3 Like子句</a><br/>
            <a href=#6.4>6.4 Glob子句</a><br/>
            <a href=#6.5>6.5 Limit子句</a><br/>
            <a href=#6.6>6.6 Order By子句</a><br/>
            <a href=#6.7>6.7 Group By子句</a><br/>
            <a href=#6.8>6.8 Having子句</a><br/>
            <a href=#6.9>6.9 Distinct关键字</a><br/>
        </dd>
        
    <dt><a href=#7.1>7. SQL基本操作</a><br/></dt>
        <dd><a href=#7.1>7.1 SQL Insert语句</a><br/>
            <a href=#7.2>7.2 SQL Delete语句</a><br/>
            <a href=#7.3>7.3 SQL Update语句</a><br/>
            <a href=#7.4>7.4 SQL Select语句</a>
        </dd>
</dl>


<blockquote><p>提示:本基础语法篇的例子都是基于<a href=#0>附录数据表</a></p></blockquote>

<p><a id=1.1>1.1 SQLite存储类</a></p>

<table border=1 cellspacing=0 style="text-algn:center">
<tr>
    <th width=20%>存储类</th>
    <th width=80%>描述</th>
</tr>
<tr> 
    <td>NULL</td>
    <td>值是一个NULL值.</td>
</tr>
<tr>
    <td>INTEGER</td>
    <td>值是一个带符号的整形，根据值的大小存储在1、2、3、4、6、8字节中</td>
</tr>
<tr>
    <td>REAL</td>
    <td>值是一个浮点值,存储为8字节点的IEE浮点数字</td>
</tr>
<tr>
    <td>TEXT</td>
    <td>值是一个文本字符串</td>
</tr>
<tr>
    <td>BLOB</td>
    <td>用于存储blob数据段，如图片、语音、视频等</td>
</tr>
</table>


<p><a id=1.2>1.2 Boolean数据类型</a><br/>
    Sqlite没有单独的Boolean存储类,布尔值被存储为整数0和1</p>

<p><a id=1.3>1.3 Date与Time数据类型</a><br/>
SQLite没有单独的用语存储日期或时间的存储类，但是SQLite能够把日期和时间存储为TEXT、REAL或INTEGER值.</p>

<table border=1 cellspacing=0 style="text-algn:center">
<tr>
    <th width=20%>存储类</th>
    <th width=100%>日期格式</th>
</tr>
<tr> 
    <td>TEXT</td>
    <td>格式为"YYYY-MM-DD HH:MM:SS.SSS"的日期</td>
</tr>
<tr>
    <td>REAL</td>
    <td>从公元前4714年11月24日格林尼治的正午开始算起的天数</td>
</tr>
<tr>
    <td>INTEGER</td>
    <td>从1970-01－01 00:00:00 UTC算起的秒数.</td>
</tr>
</table>


<p><a id=1.4>1.4 SQLite 亲和(Affinity)类型</a></p>

<table border='1' cellspacing="0" style="text-align:center">
<tr>
    <th>Affinity</th>
    <th>描述</th>
</tr>
<tr>
    <td>TEXT</td>
    <td>该列使用存储类NULL、TEXT或BLOB存储所有数据</td>
</tr>
<tr>
    <td>NUMERIC</td>
    <td>该列可以包含使用所有五个存储类的值。</td>
</tr>
<tr>
    <td>INTEGER</td>
    <td>与带有 NUMERIC affinity 的列相同，在 CAST 表达式中带有异常。</td>
</tr>
<tr>
    <td>REAL</td>
    <td>与带有 NUMERIC affinity 的列相似，不同的是，它会强制把整数值转换为浮点表示。</td>
</tr>
<tr>
    <td>NONE</td>
    <td>    带有 affinity NONE 的列，不会优先使用哪个存储类，也不会尝试把数据从一个存储类强制转换为另一个存储类。</td>
</tr>
</table>


<p>Affinity类型每一种包含的具体类型参照表:</p>

<div align="center">
<table border='1' cellspacing="0" style="text-align:center">
<tr>
    <th width=80%>数据类型</th>
    <th width=30%>Affinity</th>
<tr>
<tr>
    <td>
        <ul>
            <li>INT</li>
            <li>INTEGER</li>
            <li>TINYINT</li>
            <li>SMALLINT</li>
            <li>MEDIUMINT</li>
            <li>BIGINT</li>
            <li>UNSIGNED BIG INT</li>
            <li>INT2</li>
            <li>INT8</li>
        </ul>
    </td>
    <td>INTEGER</td>
</tr>
<tr>
    <td>
        <ul>
            <li>CHARACTER(20)</li>
            <li>VARCHAR(255)</li>
            <li>VARYING CHARACTER(255)</li>
            <li>NCHAR(55)</li>
            <li>NATIVE CHARACTER(70)</li>
            <li>NVARCHAR(100)</li>
            <li>TEXT</li>
            <li>CLOB</li>
         </ul>
    </td>
    <td>TEXT</td>
</tr>
<tr>
    <td>
        <ul>
            <li>BLOB</li>
            <li>no datatype specified</li>
        </ul>
    </td>
    <td>NONE</td>
</tr>
<tr>
    <td>
        <ul>
            <li>REAL</li>
            <li>DOUBLE</li>
            <li>DOUBLE PRECISION</li>
            <li>FLOAT</li>
        </ul>
    </td>
    <td>REAL</td>
</tr>
<tr>
    <td>
        <ul>
            <li>NUMERIC</li>
            <li>DECIMAL(10,5)</li>
            <li>BOOLEAN</li>
            <li>DATE</li>
            <li>DATETIME</li>
        </ul>
    </td>
    <td>NUMERIC</td>
</tr>
</table>
</div>


<p><br/>
<a id=2.1>2.1 SQLite创建数据库</a><br/>
<strong>因为本部分在iOS上用不上，所以忽略！</strong>
<input type="button" value="返回目录" onclick=backToMenu()></p>

<p><a id=2.2>2.2 SQLite关联数据库</a><br/>
<strong>因为本部分在iOS上用不上，所以忽略！</strong>
<input type="button" value="返回目录" onclick=backToMenu()></p>

<p><a id=2.3>2.3 SQLite分离数据库</a><br/>
<strong>因为本部分在iOS上用不上，所以忽略！</strong>
<input type="button" value="返回目录" onclick=backToMenu()></p>

<p><a id=3.1>3.1 SQLite创建表</a><br></p>

<pre><code>基本语法结构: CREATE TABLE table_name(
                column1  datatype,
                ...
            );
</code></pre>

<p><a id=3.2>3.2 SQLite删除表</a><br/></p>

<pre><code>基本语法结构: DROP TABLE table_name;
</code></pre>

<p><font color=red size=3>**使用此命令需注意，一旦表删除，表中的信息也将永久删除**</font></p>

<p><a id=4.1>4.1 算数运算符</a><br/></p>

<table border="1" cellspacing="0">
<tr>
    <th style="width:20%">运算符
    </th>
    <th style="width:45%">描述
    </th>
    <th>实例
    </th>
</tr>
<tr>
    <td>+</td>
    <td>加法 - 把运算符两边的值相加</td>
    <td> a + b 将得到 30</td>
</tr>
<tr>
    <td>-</td><td>减法 - 左操作数减去右操作数</td>
    <td> a - b 将得到 -10</td>
</tr>
<tr>
    <td>*</td>
    <td>乘法 - 把运算符两边的值相乘</td>
    <td> a * b 将得到 200</td>
</tr>
<tr>
    <td>/</td>
    <td>除法 - 左操作数除以右操作数</td>
    <td> b / a 将得到 2</td>
</tr>
<tr>
    <td>%</td>
    <td>取模 - 左操作数除以右操作数后得到的余数</td>
    <td> b % a将得到 0</td>
</tr>
</table>


<p><a id=4.2>4.2 比较运算符</a><br/></p>

<table border=1 cellspacing=0>
<tbody>
<tr>
    <th style="width:20%">运算符</th>
    <th style="width:45%">描述</th>
    <th>实例</th>
</tr>
<tr>
    <td>==</td>
    <td>检查两个操作数的值是否相等，如果相等则条件为真。</td>
    <td> (a == b) 不为真。</td>
</tr>
<tr>
    <td>=</td>
    <td>检查两个操作数的值是否相等，如果相等则条件为真。</td>
    <td> (a = b) 不为真。</td>
</tr>
<tr>
    <td>!=</td>
    <td>检查两个操作数的值是否相等，如果不相等则条件为真。</td>
    <td> (a != b) 为真。</td>
</tr>
<tr>
    <td>&lt;&gt;</td>
    <td>检查两个操作数的值是否相等，如果不相等则条件为真。</td>
    <td> (a &lt;&gt; b) 为真。</td>
</tr>
<tr>
    <td>&gt;</td>
    <td>检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td>
    <td> (a &gt; b) 不为真。</td>
</tr>
<tr>
    <td>&lt;</td>
    <td>检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td>
    <td> (a &lt; b) 为真。</td>
</tr>
<tr>
    <td>&gt;=</td>
    <td>检查左操作数的值是否大于等于右操作数的值，如果是则条件为真。</td>
    <td> (a &gt;= b) 不为真。</td>
</tr>
<tr>
    <td>&lt;=</td>
    <td>检查左操作数的值是否小于等于右操作数的值，如果是则条件为真。</td>
    <td> (a &lt;= b) 为真。</td>
</tr>
<tr>
    <td>!&lt;</td>
    <td>检查左操作数的值是否不小于右操作数的值，如果是则条件为真。</td>
    <td> (a !&lt; b) 为假。</td>
</tr>
<tr>
    <td>!&gt;</td>
    <td>检查左操作数的值是否不大于右操作数的值，如果是则条件为真。</td>
    <td> (a !&gt; b) 为真。</td>
</tr>
</table>


<p><a id=4.3>4.3 逻辑运算符</a><br/></p>

<table border=1 cellspacing=0>
<tr>
    <th style="width:20%">运算符</th>
    <th style="width:80%">描述</th>
</tr>
<tr>
    <td>AND</td>
    <td>AND 运算符允许在一个 SQL 语句的 WHERE 子句中的多个条件的存在。</td>
</tr>
<tr>
    <td>BETWEEN</td>
    <td>BETWEEN 运算符用于在给定最小值和最大值范围内的一系列值中搜索值。</td>
</tr>
<tr>
    <td>EXISTS</td>
    <td>EXISTS 运算符用于在满足一定条件的指定表中搜索行的存在。</td>
</tr>
<tr>
    <td>IN</td>
    <td>IN 运算符用于把某个值与一系列指定列表的值进行比较。</td>
</tr>
<tr>
    <td>NOT IN</td>
    <td>IN 运算符的对立面，用于把某个值与不在一系列指定列表的值进行比较。</td>
</tr>
<tr>
    <td>LIKE</td>
    <td>LIKE 运算符用于把某个值与使用通配符运算符的相似值进行比较。</td>
</tr>
<tr>
    <td>GLOB</td>
    <td>GLOB 运算符用于把某个值与使用通配符运算符的相似值进行比较。GLOB 与 LIKE 不同之处在于，它是大小写敏感的。</td>
</tr>
<tr>
    <td>NOT</td>
    <td>NOT 运算符是所用的逻辑运算符的对立面。比如 NOT EXISTS、NOT BETWEEN、NOT IN，等等。<b>它是否定运算符。</b></td>
</tr>
<tr>
    <td>OR</td>
    <td>OR 运算符用于结合一个 SQL 语句的 WHERE 子句中的多个条件。</td>
</tr>
<tr>
    <td>IS NULL</td>
    <td>NULL 运算符用于把某个值与 NULL 值进行比较。</td>
</tr>
<tr>
    <td>IS</td>
    <td>IS 运算符与 = 相似。</td>
</tr>
<tr>
    <td>IS NOT</td>
    <td>IS NOT 运算符与 != 相似。</td>
</tr>
<tr>
    <td>||</td>
    <td>连接两个不同的字符串，得到一个新的字符串。</td>
</tr>
<tr>
    <td>UNIQUE</td>
    <td>UNIQUE 运算符搜索指定表中的每一行，确保唯一性（无重复）。</td>
</tr>
</table>


<p><font color=red>**需要注意的是,exists运算符返回的是条件满足的表的所有数据，而不是指定数据行，一定要注意理解!**</font></p>

<p><a id=4.4>4.4 位运算符</a><br/></p>

<table border=1 cellspacing=0>
<tr>
    <th width="20%">运算符</th>
    <th width="45%">描述</th>
    <th>实例</th>
</tr>
<tr>
    <td>&amp;</td>
    <td>如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。</td>
    <td> (A &amp; B) 将得到 12，即为 0000 1100</td>
</tr>
<tr>
    <td>|</td>
    <td>如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。</td>
    <td> (A | B) 将得到 61，即为 0011 1101</td>
</tr>
<tr>
    <td>~</td>
    <td>二进制补码运算符是一元运算符，具有"翻转"位效应。</td>
    <td> (~A ) 将得到 -61，即为 1100 0011，2 的补码形式，带符号的二进制数。</td>
</tr>
<tr>
    <td>&lt;&lt;</td>
    <td>二进制左移运算符。左操作数的值向左移动右操作数指定的位数。</td>
    <td> A &lt;&lt; 2 将得到 240，即为 1111 0000</td>
</tr>
<tr>
    <td>&gt;&gt;</td>
    <td> 二进制右移运算符。左操作数的值向右移动右操作数指定的位数。</td>
    <td> A &gt;&gt; 2 将得到 15，即为 0000 1111</td>
</tr>
</table>


<p><a id=5.1>5.1 基本查询语句</a><br/></p>

<pre><code>基本语法:
SELECT column1, column2, columnN 
FROM table_name 
WHERE [CONTION | EXPRESSION];
</code></pre>

<p><span  style="color:red">[例子]:</span>SELECT * FROM company;</p>

<p><a id=5.2>5.2 布尔表达式</a><br/></p>

<pre><code>基本语法:
SELECT column1, column2, columnN 
FROM table_name 
WHERE SINGLE VALUE MATCHTING EXPRESSION;
</code></pre>

<p>此部分应结合<a href=#4.2>比较运算符</a>一起看;</p>

<div><span style="color:red">[例子]:</span> SELECT * FROM company WHERE salary=20000;</div>


<p><a id=5.3>5.3 数值表达式</a><br/></p>

<pre><code>基本语法:
SELECT numerical_expression as  OPERATION_NAME
[FROM table_name WHERE CONDITION] ;

其实最常用的还是几个内置的函数 avg() sum() count()d等等；
</code></pre>

<div><span style="color:red">[例子]:</span>SELECT COUNT(*) FROM company;</div>


<p><a id=5.4>5.4 日期表达式</a><br/></p>

<pre><code>被用作返回系统当前日期和时间值;
基本语法：
SELECT CURRENT_TIMESTAMP；
</code></pre>

<p><a id=6.1>6.1 Where子句</a><br/></p>

<pre><code>基本语法：
SELECT column1, column2, columnN 
FROM table_name
WHERE [condition]
</code></pre>

<div><span style="color:red">[例子]:</span> SELECT * FROM company WHERE age=32;</div>


<p>
<a id=6.2>6.2 And/Or子句</a><br/></p>

<pre><code>基本语法：
SELECT column1, column2, columnN 
FROM table_name
WHERE [condition1] AND／OR [condition2]...OR [conditionN];
</code></pre>

<div><span style="color:red">[例子]:</span> SELECT * FROM company WHERE age=32 And    salary>30000;<br/>
    SELECT * FROM company WHERE age=32 OR salary>30000;
</div>


<p><a id=6.3>6.3 Like子句</a><br/></p>

<pre><code>SQLite的like运算符是用来匹配通配符指定模式的文本值。如果搜索结果与符合like表达式的指定的模
式，like运算符将返回真（1），否则为假（0）; 

通配符：
        百分号( % ): 代表零个、一个或多个数字或字符。
        下划线( _ ): 代表单个数字或字符.

基本语法:
        SELECT FROM table_name WHERE column LIKE 'XXXX%'

        or 

        SELECT FROM table_name WHERE column LIKE '%XXXX%'

        or

        SELECT FROM table_name WHERE column LIKE 'XXXX_'

        or

        SELECT FROM table_name WHERE column LIKE '_XXXX'

        or

        SELECT FROM table_name WHERE column LIKE '_XXXX_'
</code></pre>

<div><span style="color:red">[例子]:</span> SELECT * FROM company WHERE age like '2%';</div>


<p><a id=6.4>6.4 Glob子句</a><br/></p>

<pre><code>SQLite 的 GLOB 运算符是用来匹配通配符指定模式的文本值。如果搜索表达式与模式表达式匹配，GLOB
运算符将返回真（true），也就是 1。与 LIKE 运算符不同的是，GLOB 是大小写敏感的，对于下面的通
配符，它遵循 UNIX 的语法。

通配符: 
        星号( * ): 代表零个、一个或多个数字或字符.
        问好( ? ): 代表单个数字或字符.

基本语法：
        SELECT FROM table_name WHERE column GLOB 'XXXX*'

        or 

        SELECT FROM table_name WHERE column GLOB '*XXXX*'

        or

        SELECT FROM table_name WHERE column GLOB 'XXXX?'

        or

        SELECT FROM table_name WHERE column GLOB '?XXXX'

        or

        SELECT FROM table_name WHERE column GLOB '?XXXX?'

        or

        SELECT FROM table_name WHERE column GLOB '????'
</code></pre>

<p><a id=6.5>6.5 Limit子句</a><br/></p>

<pre><code>基本语法:
SELECT column1, column2, columnN 
FROM table_name
LIMIT [no of rows]

与Offset子句一起使用的语法:
SELECT column1, column2, columnN 
FROM table_name
LIMIT [no of rows] OFFSET [row num]
</code></pre>

<div><span style="color:red">[例子]:</span> SELECT * FROM company LIMIT 3;<br/>
SELECT * FROM company LIMIT 3 OFFSET 2;
</div>


<p><a id=6.6>6.6 Order By子句</a><br/></p>

<pre><code>用于基于一个或多个列按升序或降序排列数据；

基本语法：
        SELECT column-list 
        FROM table_name 
        [WHERE condition] 
        [ORDER BY column1, column2, .. columnN] [ASC | DESC];
</code></pre>

<div><span style="color:red">[例子]:</span> SELECT * FROM company ORDER BY salary ASC ,age DESC;
</div>


<p></p>

<p><a id=6.7>6.7 Group By子句</a><br/></p>

<pre><code>SQLite 的 GROUP BY 子句用于与 SELECT 语句一起使用，来对相同的数据进行分组。
在 SELECT 语句中，GROUP BY 子句放在 WHERE 子句之后，放在 ORDER BY 子句之前。

基本语法:
        SELECT column-list
        FROM table_name
        WHERE [ conditions ]
        GROUP BY column1, column2....columnN
        ORDER BY column1, column2....columnN
</code></pre>

<div><span style="color:red">[例子]:</span> SELECT name,sum(salary) FROM company GROUP BY name ORDER BY salary ASC;
</div>


<p></p>

<p><a id=6.8>6.8 Having子句</a><br/></p>

<pre><code>HAVING 子句允许指定条件来过滤将出现在最终结果中的分组结果。WHERE 子句在所选列上设置条件，
而 HAVING 子句则在由 GROUP BY 子句创建的分组上设置条件

基本语法：
        SELECT column1, column2
        FROM table1, table2
        WHERE [ conditions ]
        GROUP BY column1, column2
        HAVING [ conditions ]
        ORDER BY column1, column2
</code></pre>

<div><span style="color:red">[例子]:</span> SELECT name,sum(salary) FROM company GROUP BY name HAVING count(name) < 2 ORDER BY salary ASC;
</div>


<p></p>

<p><a id=6.9>6.9 Distinct关键字</a><br/></p>

<pre><code>SQLite 的 DISTINCT 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记
录。有可能出现一种情况，在一个表中有多个重复的记录。当提取这样的记录时，DISTINCT 关键字就显得
特别有意义，它只获取唯一一次记录，而不是获取重复记录。

基本语法:
        SELECT DISTINCT column1, column2,.....columnN 
        FROM table_name
        WHERE [condition]
</code></pre>

<div><span style="color:red">[例子]:</span> SELECT DISTINCT name FROM company;
</div>


<p><a id=7.1>7.1 SQL Insert语句</a><br/></p>

<pre><code>基本语法:INSERT INTO TABLE_NAME (column1,...columnN) VALUES (value1,...valueN);
当要为表中所有列添加值，这时可以不用指定列名称,此时语法结构可以为:
INSERT INTO TABLE_NAME VALUES (value1, ...valueN);
</code></pre>

<p><a id=7.2>7.2 SQL Delete语句</a><br/></p>

<pre><code>基本语法结构:DELETE FROM table_name WHERE [condition];        
</code></pre>

<p><a id=7.3>7.3 SQL Update语句</a><br/></p>

<pre><code>基本语法结构:UPDATE table_name SET column1 = value1...., columnN = valueN 
WHERE [condition];
</code></pre>

<p><a id=7.4>7.4 SQL Select语句</a></p>

<pre><code>基本语法结构:SELECT column1, column2,... columnN FROM table_name;
如果要查询所有的数据，可以用 select * from table_name;
</code></pre>

<p><a id=0>附录数据表(一):</a><input type="button" value="返回顶部" onclick=backToMenu()></p>

<pre><code>id          name        age         address     salary    
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0   
2           Allen       25          Texas       15000.0   
3           Teddy       23          Norway      20000.0   
4           Mark        25          Rich-Mod    65000.0   
5           David       27          Texas       85000.0   
6           Kim         22          South-Hall  45000.0 
</code></pre>
]]></content>
  </entry>
  
</feed>
