<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sqlite | 谁在弹一曲东风破]]></title>
  <link href="http://macro44.github.io/blog/categories/sqlite/atom.xml" rel="self"/>
  <link href="http://macro44.github.io/"/>
  <updated>2015-12-21T17:38:31+08:00</updated>
  <id>http://macro44.github.io/</id>
  <author>
    <name><![CDATA[Macro]]></name>
    <email><![CDATA[macro_zj@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sqlite系统化学习之基础语法]]></title>
    <link href="http://macro44.github.io/blog/2015/12/21/sqlitexi-tong-hua-xue-xi-zhi-ji-chu-yu-fa/"/>
    <updated>2015-12-21T15:07:31+08:00</updated>
    <id>http://macro44.github.io/blog/2015/12/21/sqlitexi-tong-hua-xue-xi-zhi-ji-chu-yu-fa</id>
    <content type="html"><![CDATA[<blockquote><p>之前在项目中使用sqlite的时候，都是使用现成的基本框架，没有具体细致的去了解sqlite的从无到有的使用，最近有时间看一下sqlite语法，分为两个部分来总结一下sqlite的语法，第一部分主要用来写一些sqlite语法。主要分为两篇，这是之一，基础语法篇，还有一篇高级语法篇。第二部分用来分析在iOS项目中sqlite框架的构成，以及基本使用。</p></blockquote>

<!--more-->


<p>本教程目录：</p>

<script>
function alertWarming(){
    alert("因为本部分在iOS上用不上，所以忽略！");
}
function backToMenu(){
    window.scrollTo(0,100);
}

</script>




<dl>
    <dt><a href=#1.1>1. SQLite数据类型</a></dt>
        <dd><a href=#1.1>1.1 SQLite存储类</a><br/>    
            <a href=#1.2>1.2 Boolean数据类型</a><br/>
            <a href=#1.3>1.3 Date与Time数据类型</a><br/>
            <a href=#1.4>1.4 SQLite 亲和(Affinity)类型</a>
        </dd>
    <dt><a href=#2.1 onclick="alertWarming()">2. SQLite数据库</a><br/></dt>
        <dd><a href=#2.1 onclick="alertWarming()">2.1 SQLite创建数据库</a><br/>
            <a href=#2.2 onclick="alertWarming()">2.2 SQLite关联数据库</a><br/>
            <a href=#2.3 onclick="alertWarming()">2.3 SQLite分离数据库</a>
        </dd>
</dl>


<p><a id=1.1>1.1 SQLite存储类</a></p>

<table>
<thead>
<tr>
<th> 存储类 </th>
<th> 描述        </th>
</tr>
</thead>
<tbody>
<tr>
<td> NULL  </td>
<td>值是一个NULL值.</td>
</tr>
<tr>
<td> INTEGER </td>
<td> 值是一个带符号的整形，根据值的大小存储在1、2、3、4、6、8字节中</td>
</tr>
<tr>
<td>REAL</td>
<td> 值是一个浮点值,存储为8字节点的IEE浮点数字</td>
</tr>
<tr>
<td>TEXT</td>
<td>值是一个文本字符串</td>
</tr>
<tr>
<td>BLOB</td>
<td>用于存储blob数据段，如图片、语音、视频等</td>
</tr>
</tbody>
</table>


<p><a id=1.2>1.2 Boolean数据类型</a><br/>
    Sqlite没有单独的Boolean存储类,布尔值被存储为整数0和1</p>

<p><a id=1.3>1.3 Date与Time数据类型</a><br/>
SQLite没有单独的用语存储日期或时间的存储类，但是SQLite能够把日期和时间存储为TEXT、REAL或INTEGER值.</p>

<table>
<thead>
<tr>
<th>存储类</th>
<th>日期格式</th>
</tr>
</thead>
<tbody>
<tr>
<td>TEXT</td>
<td>格式为"YYYY-MM-DD HH:MM:SS.SSS"的日期</td>
</tr>
<tr>
<td>REAL</td>
<td>从公元前4714年11月24日格林尼治的正午开始算起的天数</td>
</tr>
<tr>
<td>INTEGER</td>
<td>从1970-01－01 00:00:00 UTC算起的秒数.</td>
</tr>
</tbody>
</table>


<p><a id=1.4>1.4 SQLite 亲和(Affinity)类型</a></p>

<table border='1' cellspacing="0" style="text-align:center">
<tr>
    <th>Affinity</th>
    <th>描述</th>
</tr>
<tr>
    <td>TEXT</td>
    <td>该列使用存储类NULL、TEXT或BLOB存储所有数据</td>
</tr>
<tr>
    <td>NUMERIC</td>
    <td>该列可以包含使用所有五个存储类的值。</td>
</tr>
<tr>
    <td>INTEGER</td>
    <td>与带有 NUMERIC affinity 的列相同，在 CAST 表达式中带有异常。</td>
</tr>
<tr>
    <td>REAL</td>
    <td>与带有 NUMERIC affinity 的列相似，不同的是，它会强制把整数值转换为浮点表示。</td>
</tr>
<tr>
    <td>NONE</td>
    <td>    带有 affinity NONE 的列，不会优先使用哪个存储类，也不会尝试把数据从一个存储类强制转换为另一个存储类。</td>
</tr>
</table>


<p>Affinity类型每一种包含的具体类型参照表:</p>

<div align="center">
<table border='1' cellspacing="0" style="text-align:center">
<tr>
    <th>数据类型</th>
    <th>Affinity</th>
<tr>
<tr>
    <td>
        <ul>
            <li>INT</li>
            <li>INTEGER</li>
            <li>TINYINT</li>
            <li>SMALLINT</li>
            <li>MEDIUMINT</li>
            <li>BIGINT</li>
            <li>UNSIGNED BIG INT</li>
            <li>INT2</li>
            <li>INT8</li>
        </ul>
    </td>
    <td>INTEGER</td>
</tr>
<tr>
    <td>
        <ul>
            <li>CHARACTER(20)</li>
            <li>VARCHAR(255)</li>
            <li>VARYING CHARACTER(255)</li>
            <li>NCHAR(55)</li>
            <li>NATIVE CHARACTER(70)</li>
            <li>NVARCHAR(100)</li>
            <li>TEXT</li>
            <li>CLOB</li>
         </ul>
    </td>
    <td>TEXT</td>
</tr>
<tr>
    <td>
        <ul>
            <li>BLOB</li>
            <li>no datatype specified</li>
        </ul>
    </td>
    <td>NONE</td>
</tr>
<tr>
    <td>
        <ul>
            <li>REAL</li>
            <li>DOUBLE</li>
            <li>DOUBLE PRECISION</li>
            <li>FLOAT</li>
        </ul>
    </td>
    <td>REAL</td>
</tr>
<tr>
    <td>
        <ul>
            <li>NUMERIC</li>
            <li>DECIMAL(10,5)</li>
            <li>BOOLEAN</li>
            <li>DATE</li>
            <li>DATETIME</li>
        </ul>
    </td>
    <td>NUMERIC</td>
</tr>
</table>
</div>


<p><br/>
<a id=2.1>2.1 SQLite创建数据库</a><br/>
<strong>因为本部分在iOS上用不上，所以忽略！</strong>
<input type="button" value="返回目录" onclick=backToMenu()></p>

<p><a id=2.2>2.2 SQLite关联数据库</a><br/>
<strong>因为本部分在iOS上用不上，所以忽略！</strong>
<input type="button" value="返回目录" onclick=backToMenu()></p>

<p><a id=2.3>2.3 SQLite分离数据库</a><br/>
<strong>因为本部分在iOS上用不上，所以忽略！</strong>
<input type="button" value="返回目录" onclick=backToMenu()></p>
]]></content>
  </entry>
  
</feed>
