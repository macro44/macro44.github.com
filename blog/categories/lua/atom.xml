<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lua | 谁在弹一曲东风破]]></title>
  <link href="http://macro44.github.io/blog/categories/lua/atom.xml" rel="self"/>
  <link href="http://macro44.github.io/"/>
  <updated>2016-02-21T20:29:57+08:00</updated>
  <id>http://macro44.github.io/</id>
  <author>
    <name><![CDATA[Macro]]></name>
    <email><![CDATA[macro_zj@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lua协同程序中resume和yield如何交换数据以及一个Demo的理解]]></title>
    <link href="http://macro44.github.io/blog/2016/01/18/luaxie-tong-cheng-xu-zhong-resumehe-yieldru-he-jiao-huan-shu-ju-yi-ji-%5B%3F%5D-ge-demode-li-jie/"/>
    <updated>2016-01-18T10:45:23+08:00</updated>
    <id>http://macro44.github.io/blog/2016/01/18/luaxie-tong-cheng-xu-zhong-resumehe-yieldru-he-jiao-huan-shu-ju-yi-ji-[?]-ge-demode-li-jie</id>
    <content type="html"><![CDATA[<blockquote><p>协同在Lua中的作用和线程比较类似，协同有非常强大的功能，但用起来也很复杂，其中最难理解的一部分就是协同的交换数据部分</p></blockquote>

<!--more-->


<p>先来看一下协同的几个基本函数</p>

<table class="reference">
<tr><th>方法</th><th> 描述</th></tr>
<tr><td>coroutine.create()</td><td>
创建coroutine，返回coroutine， 参数是一个函数，当和resume配合使用的时候就唤醒函数调用</td></tr><tr><td>

coroutine.resume()</td><td>

重启coroutine，和create配合使用</td></tr><tr><td>

coroutine.yield()</td><td>

挂起coroutine，将coroutine设置为挂起状态，这个和resume配合使用能有很多有用的效果</td></tr><tr><td>

coroutine.status()</td><td>

查看coroutine的状态<br>

注：coroutine的状态有三种：dead，suspend，running，具体什么时候有这样的状态请参考下面的程序</td></tr><tr><td>

coroutine.wrap（）</td><td>

创建coroutine，返回一个函数，一旦你调用这个函数，就进入coroutine，和create功能重复</td></tr><tr><td>

coroutine.running()</td><td>

返回正在跑的coroutine，一个coroutine就是一个线程，当使用running的时候，就是返回一个corouting的线程号</td></tr></table>


<p>在这些函数中一般出现交换数据的部分在resume函数与yield之间，我们来看几个例子</p>

<pre><code>--例子1
local co = coroutine.create(function(i)
         print("arg: ", i)          --①
         print("yield return: ", coroutine.yield(100, i)) --②
         print("print end")         --③   
         return "coroutine end" --④
         end)
print("resume 1: ", coroutine.resume(co, 1))  --⑥
print("resume 2: ", coroutine.resume(co, 2))  --⑦

下面是运行结果
arg:    1       --⑧
resume 1:   true    100 1   --⑨
yield return:   2   --⑩
print end       --⑪
resume 2:   true    coroutine end --⑫
</code></pre>

<p>分析程序不难发现，当运行了⑥之后，程序把变量1传入function，也就是开始执行①，之后，遇到了yield函数，程序suspended，此时resume返回三个量，true、100、1，其中true表示程序运行没有问题，100是yield的参数，1是传入的参数，也就是说，resume遇到yield的时候，会返回状态的同时返回yield的所有值，之后执行第二次resume，也就是⑦，此时接着yield的部分往下运行，从⑨⑩的顺序，特别是⑩的返回内容为2，可以发现，程序是先将第二个resume的参数传入了yield函数，让yield返回传入的参数，然后继续往下执行，我们就可以得出结论，resume遇到yield就停，并将参数传入，并通过resume返回所有的参数，第二次再resume的时候就会从yield开始运行，此时yield才第一次运行，再分析⑫的结果，此时主体函数只有④部分没有运行，所以resume返回“coroutine end”</p>

<p><strong>我们总结一下，首先resume函数开始或者继续create函数的运行，每个resume都是延续上一个协同，resume会将参数传入主体函数，同时返回。如果程序没有错误，则返回true，并返回yield的所有参数，或者是主体函数的返回值。而yield函数会使程序挂起，同时也会产生返回值，返回的是额外的传入参数</strong></p>

<p>有这个基础之后，我们来看一下一个官方的例子</p>

<pre><code>--官方Demo
 function foo (a)
   print("foo", a)
   return coroutine.yield(2*a)
 end

 co = coroutine.create(function (a,b)
       print("co-body", a, b)
       local r = foo(a+1)       ---⑨
       print("co-body", r)
       local r, s = coroutine.yield(a+b, a-b) ----⑩
       print("co-body", r, s)
       return b, "end"
 end)

 print("main", coroutine.resume(co, 1, 10))  ----①
 print("main", coroutine.resume(co, "r"))    ----②
 print("main", coroutine.resume(co, "x", "y")) ---③
 print("main", coroutine.resume(co, "x", "y")) ---④

下面是运行结果
co-body 1   10
foo 2
main    true    4  ----⑤
co-body r
main    true    11  -9 ---⑥
co-body x   y
main    true    10  end  ---⑦
main    false   cannot resume dead coroutine  ---⑧
</code></pre>

<p>怎么分析这样的程序，由入口导向，结合结果，我们先从①开始，进入coroutine.create的函数部分，然后肯定输出"co-body"这一行，接着调用foo函数，输出“foo”这一行，这时候遇到yield函数，程序挂起，resume函数返回，返回程序没有出错，所以第一个参数true，返回的应该是foo函数的结果，所以第二个参数为4，这就是我们对第一个resume的理解；</p>

<p>接着第二个resume，从⑨处开始（不知道为什么可以结合上面的例子进行理解），此时返回的是yield的参数，因为传入的是“r”，故此时r ＝ “r” 也就所有“co-body r”这一行，然后遇到yield函数，程序挂起，resume函数返回，程序运行没有出错，所以第一个参数为true，然后返回的是yield的所有参数，a= 1 ,b = 10,所以有返回的参数为"true 11 -9",这是对第二个resume的理解；</p>

<p>接着第三个resume, 从⑩开始，此时r，s分别对应着，yield函数的返回值，而返回值对应的是传入的额外的参数，也就是传入的“x”,&ldquo;y"，所以有“co-body x y”这行，然后函数结束，resume函数接收的是函数的返回值,故输出"true 10 end&rdquo;,这是对第三个resume的理解</p>

<p>接着第四个resume,因为此时函数主体已经结束了。协同的状态已经为dead了，也就是说resume发生了错误，所以返回"false cannot resume dead coroutine",这就是对第四个resume的理解</p>

<h3>参考文档</h3>

<p><a href="http://cloudwu.github.io/lua53doc/manual.html#pdf-coroutine.resume">Lua5.3参考手册</a><br/>
<a href="http://www.cnblogs.com/yjf512/archive/2012/05/28/2521412.html">Lua协同程序-轩脉刃de刀光剑影-博客</a><br/>
<a href="http://www.runoob.com/lua/lua-coroutine.html">Lua协同程序-Runoob教程</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua元表(Metatable)以及元表在对象中的应用]]></title>
    <link href="http://macro44.github.io/blog/2016/01/15/luayuan-biao-metatable-yi-ji-yuan-biao-zai-dui-xiang-zhong-de-ying-yong/"/>
    <updated>2016-01-15T17:25:23+08:00</updated>
    <id>http://macro44.github.io/blog/2016/01/15/luayuan-biao-metatable-yi-ji-yuan-biao-zai-dui-xiang-zhong-de-ying-yong</id>
    <content type="html"><![CDATA[<blockquote><p>Lua table中我们可以通过访问key来获取value的值，但是却无法直接对两个table进行操作，此时我们通过元表修改操作符的行为，使其当面对一非预定义的操作时执行一个指定的操作.此行为可相较于c＋＋里面的运算符重载来看</p></blockquote>

<p>元方法使用机制:首先检测一个操作中的值是否有元素,其次这些元素是否定义了关于次操作的方法.例如,两个表a+b,首先检查两个表是否有元素，之后检查是否有一个叫"__add"的字段，若找到则，则调用对应定义的值。其定义的值一般是一个函数就是“<b>元方法</b>”</p>

<!--more-->


<h3>设置元表以及获取元表的方法</h3>

<ul>
<li>setmetatable(table,metatable): 对指定table设置元表(metatable)，如果元表(metatable)中存在__metatable键值，setmetatable会失败 。</li>
<li>getmetatable(table): 返回对象的元表(metatable)。</li>
</ul>


<p>创建元表以及获取元表</p>

<pre><code>创建元表
mytable = {}
mymetatable = {}
setmetatable(mytable,mymetatable)

也可以写为
mymetatable = {}
mytable = setmetatable(mytable,mymetatable)

获取元表 
mymetatable = getmetatable(mytable) 
</code></pre>

<h3>__index元方法和__newindex元方法</h3>

<p>__index元方法用于查看表中元素是否存在,如果不存在，则返回nil，否则则由__index返回结果<br/>
__newIndex元方法向表中不存在索引赋值</p>

<pre><code>--__index元方法
tA = setmetatable({key1 = "value1"},{
    __index = function(tA,key)
        if key == key3 then
            return "value3"
        else
            retrun tA[key]
        end
    end
})

--__newindex元方法
mt = {}
tA = setmetatable({key1="value1"},{
    __newindex=mt
})

mytable.newkey = "新值2"
print(mytable.newkey,mymetatable.newkey) -- nil 新值2

mytable.key1 = "新值1"
print(mytable.key1,mymetatable.key1)  －－新值1 nil
</code></pre>

<h3>表中添加操作符</h3>

<p>__add、__sub、__mul、__div、__mod、__unm、__concat、__eq、__lt、__le</p>

<pre><code>--__add元方法
tA = {1,2,3}
tB = {4,5,6}

tM = {}
tM.__add = function(t1,t2)
    for _, item in pairs(t2) do
        table.insert(t1,item)
    end
    return t1
end

setmetatable(tA,tM)

tmun = tA + tB 

for k,v in pairs(tmun) do
    print(v)
end

--__lt元方法
tM = {}
tM.__lt = function(t1,t2)
    return #t1 &lt; #t2
end

tA = {3}
tB = {1,2}

setmetatable(tA,tM)
setmetatable(tB,tM)

print(tA &lt; tB)
</code></pre>

<h3>元方法实例</h3>

<pre><code>    Set = {}
    mt = {} --元表

    function Set.new(t)
        local set = {}
        setmetatable(set,mt)
        for _,v in pairs(t) do
            set[v] = true
        end
        return set
    end

    --tostring
    function Set.toString(set)
        local t = {}
        for s in pairs(set) do
            t[#t + 1] = s
        end
        return "{"..table.concat(t,",").."}"
        end

    function Set.print(s)
        print(Set.toString(s))
    end

    --add
    --对此方法的理解为，虚表上每一个值都有一个标志，当设置它为true时，则表明这个元素在虚表
    中存在了。
    function Set.add(t1,t2)

        if getmetatable(a) ~= mt or getmetatable(b) ~= mt then
         error("attemp to 'add' a set with a non-set value",                        2)   --error第二个参数的116
         end

        local res = Set.new{} --相当于new({})
        for k in pairs(t1) do
            res[k] = true
        end

        for k in pairs(t2) do
            res[k] = true
        end

        return res
    end

    mt.__add = Set.add

    --__sub
    function Set.sub(t1,t2)
        local res = Set.new{}
        for k in pairs(t1) do
            if t1[k] ~= t2[k] and not t2[k] then
            res[k] = true
        end 
    end
return res
end

mt.__sub = Set.sub

--__mul
function Set.mul(t1,t2)
    local res = Set.new{}
    for k in pairs(t1) do
        res[k] = t2[k]
    end
    return res
end

mt.__mul = Set.mul

--div
function Set.div(t1,t2)
    local res = Set.new()
    for k in pairs(t1) do
        if t1[k] ~=t2[k] and (not t2[k]) then
            res[k] = t1[k]
        end
    end
    return res
end

mt.__div = Set.div

--__call
function Set.call(t1,t2)
    local res = Set.new{}
    for i in pairs(t1) do
        res[i] = true
    end
    for i in pairs(t2) do
        res[i] = true
    end
    return res
end

mt.__call = Set.call

s1 = Set.new{1,2,3,4}
s2 = Set.new{5,6}

Set.print(s1(s2))
</code></pre>
]]></content>
  </entry>
  
</feed>
