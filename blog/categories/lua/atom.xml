<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Lua | 谁在弹一曲东风破]]></title>
  <link href="http://macro44.github.io/blog/categories/lua/atom.xml" rel="self"/>
  <link href="http://macro44.github.io/"/>
  <updated>2016-01-17T16:10:56+08:00</updated>
  <id>http://macro44.github.io/</id>
  <author>
    <name><![CDATA[Macro]]></name>
    <email><![CDATA[macro_zj@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lua元表(Metatable)以及元表在对象中的应用]]></title>
    <link href="http://macro44.github.io/blog/2016/01/15/luayuan-biao-metatable-yi-ji-yuan-biao-zai-dui-xiang-zhong-de-ying-yong/"/>
    <updated>2016-01-15T17:25:23+08:00</updated>
    <id>http://macro44.github.io/blog/2016/01/15/luayuan-biao-metatable-yi-ji-yuan-biao-zai-dui-xiang-zhong-de-ying-yong</id>
    <content type="html"><![CDATA[<blockquote><p>Lua table中我们可以通过访问key来获取value的值，但是却无法直接对两个table进行操作，此时我们通过元表修改操作符的行为，使其当面对一非预定义的操作时执行一个指定的操作.此行为可相较于c＋＋里面的运算符重载来看</p></blockquote>

<p>元方法使用机制:首先检测一个操作中的值是否有元素,其次这些元素是否定义了关于次操作的方法.例如,两个表a+b,首先检查两个表是否有元素，之后检查是否有一个叫"__add"的字段，若找到则，则调用对应定义的值。其定义的值一般是一个函数就是“<b>元方法</b>”</p>

<h3>设置元表以及获取元表的方法</h3>

<ul>
<li>setmetatable(table,metatable): 对指定table设置元表(metatable)，如果元表(metatable)中存在__metatable键值，setmetatable会失败 。</li>
<li>getmetatable(table): 返回对象的元表(metatable)。</li>
</ul>


<p>创建元表以及获取元表</p>

<pre><code>创建元表
mytable = {}
mymetatable = {}
setmetatable(mytable,mymetatable)

也可以写为
mymetatable = {}
mytable = setmetatable(mytable,mymetatable)

获取元表 
mymetatable = getmetatable(mytable) 
</code></pre>

<h3>__index元方法和__newindex元方法</h3>

<p>__index元方法用于查看表中元素是否存在,如果不存在，则返回nil，否则则由__index返回结果<br/>
__newIndex元方法向表中不存在索引赋值</p>

<pre><code>--__index元方法
tA = setmetatable({key1 = "value1"},{
    __index = function(tA,key)
        if key == key3 then
            return "value3"
        else
            retrun tA[key]
        end
    end
})

--__newindex元方法
mt = {}
tA = setmetatable({key1="value1"},{
    __newindex=mt
})

mytable.newkey = "新值2"
print(mytable.newkey,mymetatable.newkey) -- nil 新值2

mytable.key1 = "新值1"
print(mytable.key1,mymetatable.key1)  －－新值1 nil
</code></pre>

<h3>表中添加操作符</h3>

<p>__add、__sub、__mul、__div、__mod、__unm、__concat、__eq、__lt、__le</p>

<pre><code>--__add元方法
tA = {1,2,3}
tB = {4,5,6}

tM = {}
tM.__add = function(t1,t2)
    for _, item in pairs(t2) do
        table.insert(t1,item)
    end
    return t1
end

setmetatable(tA,tM)

tmun = tA + tB 

for k,v in pairs(tmun) do
    print(v)
end

--__lt元方法
tM = {}
tM.__lt = function(t1,t2)
    return #t1 &lt; #t2
end

tA = {3}
tB = {1,2}

setmetatable(tA,tM)
setmetatable(tB,tM)

print(tA &lt; tB)
</code></pre>

<h3>元方法实例</h3>

<pre><code>    Set = {}
    mt = {} --元表

    function Set.new(t)
        local set = {}
        setmetatable(set,mt)
        for _,v in pairs(t) do
            set[v] = true
        end
        return set
    end

    --tostring
    function Set.toString(set)
        local t = {}
        for s in pairs(set) do
            t[#t + 1] = s
        end
        return "{"..table.concat(t,",").."}"
        end

    function Set.print(s)
        print(Set.toString(s))
    end

    --add
    --对此方法的理解为，虚表上每一个值都有一个标志，当设置它为true时，则表明这个元素在虚表
    中存在了。
    function Set.add(t1,t2)

        if getmetatable(a) ~= mt or getmetatable(b) ~= mt then
         error("attemp to 'add' a set with a non-set value",                        2)   --error第二个参数的116
         end

        local res = Set.new{} --相当于new({})
        for k in pairs(t1) do
            res[k] = true
        end

        for k in pairs(t2) do
            res[k] = true
        end

        return res
    end

    mt.__add = Set.add

    --__sub
    function Set.sub(t1,t2)
        local res = Set.new{}
        for k in pairs(t1) do
            if t1[k] ~= t2[k] and not t2[k] then
            res[k] = true
        end 
    end
return res
end

mt.__sub = Set.sub

--__mul
function Set.mul(t1,t2)
    local res = Set.new{}
    for k in pairs(t1) do
        res[k] = t2[k]
    end
    return res
end

mt.__mul = Set.mul

--div
function Set.div(t1,t2)
    local res = Set.new()
    for k in pairs(t1) do
        if t1[k] ~=t2[k] and (not t2[k]) then
            res[k] = t1[k]
        end
    end
    return res
end

mt.__div = Set.div

--__call
function Set.call(t1,t2)
    local res = Set.new{}
    for i in pairs(t1) do
        res[i] = true
    end
    for i in pairs(t2) do
        res[i] = true
    end
    return res
end

mt.__call = Set.call

s1 = Set.new{1,2,3,4}
s2 = Set.new{5,6}

Set.print(s1(s2))
</code></pre>
]]></content>
  </entry>
  
</feed>
