<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | 谁在弹一曲东风破]]></title>
  <link href="http://macro44.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://macro44.github.io/"/>
  <updated>2016-02-27T11:43:47+08:00</updated>
  <id>http://macro44.github.io/</id>
  <author>
    <name><![CDATA[Macro]]></name>
    <email><![CDATA[macro_zj@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS网络框架ASI与AFN的比较]]></title>
    <link href="http://macro44.github.io/blog/2016/02/25/ioswang-luo-kuang-jia-asiyu-afnde-bi-jiao/"/>
    <updated>2016-02-25T23:08:15+08:00</updated>
    <id>http://macro44.github.io/blog/2016/02/25/ioswang-luo-kuang-jia-asiyu-afnde-bi-jiao</id>
    <content type="html"><![CDATA[<blockquote><p>ASIHttpRequest(ASI)与AFNetworking(AFN)这两个网络框架,对每一个iOS开发者开发新项目要从中选择一个作为应用的主要网络框架都不是一件容易的事情，两者各有优鄙。下面我们将从原理、用法、功能、性能等等方面来总结比较一下这两者；</p></blockquote>

<!--more-->


<h3>原理</h3>

<p><img src="http://7xopon.com1.z0.glb.clouddn.com/2016022503.png" alt="原理图" />
原理图如上图所示<br/>
框架的基础都是基于socket，BSD Socket是一种最常见的Socket抽象接口；<br/>
Core Foundation中的CFSocket就是基于BSD Socket开发的。它几乎涵盖了BSD Socket的全部共功能，更重要的是把Socket整合到事件的处理循环中。Core Foundation中CFStream是基于CFSocket开发的读写流支持；<br/>
CFNetwork是基于CoreFoundation中CFStream的一个底层高性能网络框架，它由提供基础服务的CFSocketStream、支持HTTP协议的CFHTTP、基于CFHTTP用于身份验证的CFHTTPAuthentication和支持FTP协议的CFFTP组成;<br/>
如上图所示，ASI是基于CFHTTP开发的，而AFN是基于NSURL开发的，也就是说ASI比AFN更底层；</p>

<h3>用法</h3>

<p>ASI基本上都是通过代理的方法进行回调，而AFN基本上是通过block</p>

<h3>功能</h3>

<p>AFN只封装了一些常用功能，满足基本需求，而忽略了很多扩展功能。例如：AFN默认没有封装同步请求，如果开发者需要使用同步请求，则需要重写getPath:parameters:success:failure方法，对于AFHTTPRequestOperation进行同步处理；而ASI则是直接通过调用一个startSynchronous方法。</p>

<p>另外，AFN针对JSON、XML、Plist和Image四中数据结构封装了各自的处理器，开发者可以把处理器注册到操作队列中，直接在回调方法中获得格式化以后的数据；而ASI在这方面没有进行处理，但预留了接口和工具进行处理。</p>

<h3>性能方面</h3>

<p>ASI表现的更加平稳，优异</p>

<h3>总体比较表格</h3>

<table STYLE="TexT-ALiGn: left; WiDoWs: 2; TexT-TrAnsForM: none; TexT-inDenT: 0px; FonT: medium Tahoma; WHiTe-spACe: normal; orpHAns: 2; LeTTer-spACinG: normal; CoLor: rgb(0,0,0); WorD-spACinG: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px" BORDER="1" CELLSPACING="0" CELLPADDING="2" WIDTH="100%">
<tbody>
<tr>
<td VALIGN="top"><br />
对比</TD>
<td STYLE="TexT-ALiGn: center" VALIGN="top">ASI</TD>
<td STYLE="TexT-ALiGn: center" VALIGN="top">AFN</TD>
</TR>
<tr>
<td VALIGN="top">更新状态</TD>
<td VALIGN="top">2012年10月份，已经停止更新</TD>
<td VALIGN="top">持续更新中，目前已更新至2.0版</TD>
</TR>
<tr>
<td VALIGN="top">介绍</TD>
<td VALIGN="top">
<div STYLE="TexT-ALiGn: left">
ASI的直接操作对象<b>ASIHTTPRequest，</B>是一个实现了了NSCopying协议的NSOperation子类。</DIV>
<div STYLE="TexT-ALiGn: left">
在initialize和initWithURL:方法中初始化相关属性并配置一系列请求相关参数默认值。此外，ASIHTTPRequest还提供了一系列的实例方法用来配置请求对象。</DIV>
</TD>
<td STYLE="TexT-ALiGn: left" VALIGN="top">
AFN的直接操作对象<b>AFHTTPClient</B>，是一个实现了NSCoding和NSCopying协议的NSObject子类。AFHTTPClient是一个封装了一系列操作方法的“工具类”，处理请求的操作类是一系列单独的，基于NSOperation封装的，AFURLConnectionOperation<wbr>的子类。</TD>
</TR>
<tr>
<td STYLE="TexT-ALiGn: left" VALIGN="top">线程处理模式</TD>
<td STYLE="TexT-ALiGn: left" VALIGN="top">
<div>
每一个请求都由构造方法初始化一个（共享）实例，通过这个实例配置参数并发起请求。ASI最初使用delegate模式回调，在iOS
SDK支持Block之后也提供了注册Block的实例方法。</DIV>
<div>
ASI采取的是CFHTTP请求完成，直接回调ASIHTTPRequest的实例方法，通过储存的实例对象记录的信息完成Delegate模式或Block模式的回调。</DIV>
<div><br /></DIV>
<div>
在异步请求的处理上，ASIHTTPRequest对象初始化结束后，在startAsynchronous方法中把对象加入共享操作队列。此后，<b>包括创建CFHTTPMessageRef，也就是处理网络请求的主要对象（事实上是一个指向__CFHTTPMessage结构的指针），在内的所有操作都在ASIHTTPRequest对象所属的子线程中完成。</B></DIV>
</TD>
<td VALIGN="top">
<div STYLE="TexT-ALiGn: left">
AFN的示例代码中通过一个静态方法，使用dispatch_once()的方式创建AFHTTPClient的共享实例，这也是官方建议的使用方法。在创建AFHTTPClient的初始化方法中，创建了OperationQueue并设置一系列参数默认值。在getPath:parameters:success:failure方法中创建NSURLRequest，以NSURLRequest对象实例作为参数，创建一个NSOperation，并加入在初始化发方中创建的NSOperationQueue。</DIV>
<div STYLE="TexT-ALiGn: left">
<b>以上操作都是在主线程中完成的。在NSOperation的start方法中，以此前创建的NSURLRequest对象为参数创建NSURLConnection并开启连结。</B></DIV>
</TD>
</TR>
<tr>
<td STYLE="TexT-ALiGn: left" VALIGN="top">数据处理模式</TD>
<td STYLE="TexT-ALiGn: left" VALIGN="top">
ASI在这方面显得更原始，没有针对任何数据类型做特别封装，只是预留了各种接口和工具供开发者自行扩展。</TD>
<td STYLE="TexT-ALiGn: left" VALIGN="top">
AFN针对JSON、XML、PList和Image四种数据结构封装了各自处理器，开发者可以把处理器注册到操作队列中，直接在回调方法中获得格式化以后的数据。</TD>
</TR>
<tr>
<td STYLE="TexT-ALiGn: left" VALIGN="top">同步请求</TD>
<td VALIGN="top">
<div STYLE="TexT-ALiGn: left">
ASI则是直接通过调用一个startSynchronous方法。</DIV>
<div STYLE="TexT-ALiGn: left"><br /></DIV>
</TD>
<td STYLE="TexT-ALiGn: left" VALIGN="top">
AFN默认没有封装同步请求，如果开发者需要使用同步请求，则需要重写getPath:parameters:success:failure方法，对AFHTTPRequestOperation进行同步处理</TD>
</TR>
<tr>
<td STYLE="TexT-ALiGn: left" VALIGN="top">异步回调的处理</TD>
<td VALIGN="top">
<div STYLE="TexT-ALiGn: left">
【使用AFNetworking进行网络异步请求时，block:(void(^)代码块实际返回到UI主线程中。<span STYLE="BACKGroUnD-CoLor: rgb(255,255,255)">即使在子线程中使用AFNetWorking进行网络的异步请求，block:(void(^)代码块仍然返回到UI主线程中（<b>AF框架，它里面已经create了异步线程<span>&nbsp;<wbr></SPAN></B>）。因此</SPAN><b STYLE="BACKGroUnD-CoLor: rgb(255,255,255)">无论当前处在主线程还是子线程，异步返回均返回到UI主线程中。】</B></DIV>
</TD>
<td VALIGN="top">
<div STYLE="TexT-ALiGn: left">
为一系列相关的请求定义一个HTTPClient，共用一个BaseURL。每次请求把URL中除BaseURL的Path部分做为参数传给HTTPClient的静态方法，并注册一个Block用于回调。</DIV>
<div STYLE="TexT-ALiGn: left">
AFN则直接使用了NSOperation的completionBlock属性。</DIV>
</TD>
</TR>
<tr>
<td VALIGN="top">
<div STYLE="TexT-ALiGn: left">基于的底层开发框架</DIV>
<div STYLE="TexT-ALiGn: left"><br /></DIV>
</TD>
<td VALIGN="top">
<div STYLE="TexT-ALiGn: center">CFNetwork框架</DIV>
<div STYLE="TexT-ALiGn: left">
使用CFnetwork而不是Cocoa框架NSURL有几点好处。CFNetwork更加专注于网络协议，而NSURL更加专注于数据访问，比如通过HTTP或者FTP传输数据。尽管NSURL的确也提供了一些可配置功能，可是CFNetwork提供的要多的多。另外NSURL还需要你使用Objective_c。如果做不到这点的话，还是应该使用CFNetwork</DIV>
</TD>
<td VALIGN="top">
<div STYLE="TexT-ALiGn: center">NSURL</DIV>
<div STYLE="TexT-ALiGn: left">【使用iOS5.0 SDK NSURLConnection：</DIV>
<div STYLE="TexT-ALiGn: left">
&nbsp;<wbr>1、进行网络同步请求（sendSynchronousRequest）时，调用该请求接口的操作在哪个线程，同步返回的网络结果就处于哪个线程，因此通常进行网络同步请求时，为了避免阻塞UI主线程，需要在子线程中进行网络请求；</DIV>
<div STYLE="TexT-ALiGn: left">
2、进行网络异步请求（sendAsynchronousRequest）时，block:(void(^)代码块实际返回到子线程中。因此，此时如需要向UI线程发送通知，则需要跳转到主线程中发送通知dispatch_async(dispatch_get_main_queue(),
^{}）；】</DIV>
</TD>
</TR>
<tr>
<td STYLE="TexT-ALiGn: left" VALIGN="top">底层开发矿建介绍</TD>
<td VALIGN="top">
<div STYLE="TexT-ALiGn: left">CFNetwork是基于Core
Foundation中CFStream的一个底层高性能网络框架，它由提供基础服务的CFSocketStream，支持HTTP协议的CFHTTP，基于CFHTTP用于身份认证的CFHTTPAuthentication和支持FTP协议的CFFTP组成。</DIV>
<div STYLE="TexT-ALiGn: left">Core Foundation框架中的CFSocket就是基于BSD
Socket开发的。它几乎涵盖了BSD Socket的全部功能，更重要的是把Socket整合到事件的处理循环中。Core
Founda-tion中较高层的CFStream是基于CFSocket开发的读写流支持。</DIV>
</TD>
<td STYLE="TexT-ALiGn: left" VALIGN="top">
如图所示，ASI是基于CFHTTP开发的一个组件；而AFN的基础——NSURL，也是基于CFNetwork开发的，也就是说ASI相比AFN更加底层。</TD>
</TR>
<tr>
<td STYLE="TexT-ALiGn: left" VALIGN="top">性能对比</TD>
<td STYLE="TexT-ALiGn: left" VALIGN="top">AFN请求优于ASI</TD>
<td STYLE="TexT-ALiGn: left" VALIGN="top"><br /></TD>
</TR>
<tr>
<td STYLE="TexT-ALiGn: left" VALIGN="top">总结</TD>
<td STYLE="TexT-ALiGn: left" VALIGN="top">
ASI更适合已经发展了一段时间的应用，或者开发资源相对丰富的团队，因为往往这些团队（或他们的应用）已经积累了一定的经验，无论是产品上还是技术上的。需求复杂度就是在这种时候高起来，而且底层订制的需求也越来越多，此时AFN就很难满足需求，需要牺牲一定的易用性，使用ASI作为网络底层控件。</TD>
<td STYLE="TexT-ALiGn: left" VALIGN="top">
AFN适合逻辑简单的应用，或者更适合开发资源尚不丰富的团队，因为AFN的易用性要比ASI好很多，而这样的应用（或团队）对底层网络控件的定制化要求也非常低。</TD>
</TR>
</TBODY>
</TABLE>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代理、通知、block的比较]]></title>
    <link href="http://macro44.github.io/blog/2016/02/25/dai-li-,-tong-zhi-,-blockde-bi-jiao/"/>
    <updated>2016-02-25T12:39:16+08:00</updated>
    <id>http://macro44.github.io/blog/2016/02/25/dai-li-,-tong-zhi-,-blockde-bi-jiao</id>
    <content type="html"><![CDATA[<blockquote><p>代理、通知、block三者在iOS编程中是较为常见的回调模式，三者的用法也有诸多类似之处，但是在具体场景中的选择对于初学者或者研究不够深入的同学来说是比较“随性”的，本文就总结归纳一下三者的用法，以及三者的区别。</p></blockquote>

<!--more-->


<h3>代理模式</h3>

<p>代理模式包含三个方面：1、委托方；2、代理方；3、两者之间的协议；三者之间的关系如下图
<img src="http://7xopon.com1.z0.glb.clouddn.com/2016022501.png" alt="代理模式关系图" /><br/>
一般情况下，我们把协议与委托方放在一块。可以这样去理解，有一些需求、或者有一些数据在委托方没有办法得到，只能通过第二方提供，当然也可以独立。</p>

<p>具体代码：数据传递、事件处理</p>

<pre><code>//协议部分
@protocol CallBackDelegate &lt;NSObject&gt;

- (void)showArrayWithDelegate:(NSArray*)dataArray;

@end

//委托方
@interface CallBackProtocol : NSObject

@property (nonatomic,weak) id&lt;CallBackDelegate&gt; delegate;

@end

//代理方
//1、实现代理的指向，即将CallBackDelegate指向代理方，一般形式
//self.delegate = 委托方.delegate

//2、实现具体的代理方法
- (void)showArrayWithDelegate:(NSArray*)dataArray{
//代理的事情
    _dataArray = dataArray;
}
</code></pre>

<h3>通知模式</h3>

<p>通知是一种一对多的数据传递、或者事件响应模式，主要需要设置两个方面，1、观察者；2、发送通知方；通过推送中心进行消息转发
<img src="http://7xopon.com1.z0.glb.clouddn.com/2016022502.png" alt="通知模式" /><br/>
实现的步骤：1、注册观察者 2、接收通知 3、移除观察者</p>

<p>具体代码：数据传递、事件处理</p>

<pre><code>//注册观察者
- (void)viewWillAppear:(BOOL)animated{
[super viewWillAppear:animated];
[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(resiveNotification:) name:@"resiviXXXNotification" object:nil];
}

//发送消息
 [[NSNotificationCenter defaultCenter] postNotificationName:@"resiviXXXNotification" object:nil];

 //移除观察者
 - (void)viewWillDisappear:(BOOL)animated{
[[NSNotificationCenter defaultCenter] removeObserver:self name:@"resiviXXXNotification" object:nil];
}
</code></pre>

<h3>block</h3>

<p>相对于delegate或者通知，block相对较为方便。且易读性更强。block可以看成是一个内部函数整体;<br/>
具体代码：</p>

<pre><code>//声明Block
typedef void(^CallBackBlock)(NSInteger);

//内部方法
- (void)sendData:(CallBackBlock)block{
    block(3);
}

//调用函数
[self sendData:^(NSInteger i){
    _number = i;
}];
</code></pre>

<p>需要特别注意的点:block的使用需要注意循环引用的问题<br/>
在ARC下：</p>

<pre><code>__weak typeof(self) weakSelf = self;
[self sendData:(^NSInteger i){
    [weakSelf  doSomething];
}];  
</code></pre>

<p>在MRC下:</p>

<pre><code>__block typeof(self) weakSelf = self;
[self sendData:(^NSInteger i){
    [weakSelf doSomething];
}];
</code></pre>

<p><a href="http://fuckingblocksyntax.com/">block用法大全</a></p>

<h3>三者区别:</h3>

<p>1、通知是一种一对多的模式，当有很多的控制器需要知道一个事件，就用通知。但是有一个弊端，当接收的对象多了的话，就有可能存在不想接收通知的对象接收到通知，且需要注意，一定要在dealloc中移除。
2、delegate与block都是一对一的模式，两者的比较：a、block相对要方便，且易读性高；b、delegate运行的成本更低，当block出栈的时候需要由栈内存拷贝到堆内存，对象需要增加引用计数，使用完或者block置为nil才移除，delegate只保存一个对象的指针，没有额外的消耗；c、delegate更加适合过程信息的传输,比如想要知道表格是否滑动，滑到了那样的位置，是否结束滑动。而block更加注重结果</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App可执行文件瘦身(二)]]></title>
    <link href="http://macro44.github.io/blog/2015/12/14/ios-appke-zhi-xing-wen-jian-shou-shen-er/"/>
    <updated>2015-12-14T18:11:05+08:00</updated>
    <id>http://macro44.github.io/blog/2015/12/14/ios-appke-zhi-xing-wen-jian-shou-shen-er</id>
    <content type="html"><![CDATA[<div class="text" style="text-align:center;"><font size=6 color=red>iOS可执行文件瘦身方法</font></div>


<blockquote><p>在第一部分中，我们已经介绍了如何获取可执行文件组成列表，以及如何查看静态链接库的占比的方法。这一部分我们将来仔细介绍可执行文件瘦身的具体方法；</p></blockquote>

<p><a href="http://blog.cnbang.net/tech/2544/">转载于bang&rsquo;s blog</a>
</br></p>

<!--more-->


<h3>编译选项</h3>

<ol>
<li>编译器优化级别
Build Settings->Optimization Level有几个编译优化选项，release版应该选择Fastest, Smalllest，这个选项会开启那些不增加代码大小的全部优化，并让可执行文件尽可能小。</li>
<li><p>去除符号信息
Strip Linked Product / Deployment Postprocessing / Symbols Hidden by Default 在release版本应该设为yes，可以去除不必要的调试符号。Symbols Hidden by Default会把所有符号都定义成”private extern”，详细信息见<a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachOTopics/1-Articles/executing_files.html#//apple_ref/doc/uid/TP40001829-97021-TPXREF121">官方文档</a>。</p>

<p>  这些选项目前都是XCode里release的默认选项，但旧版XCode生成的项目可能不是，可以检查一下。其他优化还可以参考官方文档—<a href="https://developer.apple.com/legacy/library/documentation/Performance/Conceptual/CodeFootprint/CodeFootprint.pdf">CodeFootprint.pdf</a></p></li>
</ol>


<h3>第三方库统计</h3>

<p>通过<a href="http://macro44.github.io/blog/2015/12/14/ios-appke-zhi-xing-wen-jian-shou-shen-%5B%3F%5D/">(一)</a>中对可执行文件的分析可以知道第三方库的占比，从而判断是否值得去找可执行方案去替换掉这个第三方库，转载作者写了一个node.js脚本，可以通过linkmap去统计每个.o目标文件占用的体积和每个.a静态库占用的体积.具体在<a href="https://gist.github.com/bang590/8f3e9704f1c2661836cd">详见这里</a></p>

<h3>ARC ->MRC</h3>

<p>具体没看懂，知道结论是可减少资源包的8%左右，有兴趣的可查看<a href="http://blog.cnbang.net/tech/2544/">原文</a>,但是这样程序的维护成本就上升了，如果没有特殊情况，一般不建议使用.</p>

<h3>无用代码</h3>

<p>在项目里新建一个类，给它添加几个方法，但不要在任何地方import它，build完项目后观察linkmap，你会发现这个类还是被编译进可执行文件了。
按C++的经验，没有被使用到的类和方法编译器都会优化掉，不会编进最终的可执行文件，但object-c不一样，因为object-c的动态特性，它可以通过类和方法名反射获得这个类和方法进行调用，所以就算在代码里某个类没被使用到，编译器也没法保证这个类不会在运行时通过反射去调用，所以只要是在项目里的文件，无论是否又被使用到都会被编译进可执行文件。
对此我们可以通过脚本，遍历整个项目的文件，找出所有没有被引用的类文件和没有被调用的方法，在保证没有其他地方动态调用的情况下把它们去掉。如果整个项目历时很长，历时代码遗留较多，这个清理对可执行文件省出的空间还是挺可观的。</p>

<h3>类/方法名的长度</h3>

<p>观察linkmap可以发现每个类和方法名都在__cstring段里都存了相应的字符串值，所以类和方法名的长短也是对可执行文件大小是有影响的，原因还是object-c的动态特性，因为需要通过类/方法名反射找到这个类/方法进行调用，object-c对象模型会把类/方法名字符串都保存下来。
对此我们可以考虑在编译前把所有类和方法名进行混淆，跟压缩js一样，把长名字替换成短名字，这样做的好处除了缩小体积外，还对安全性有很大提升，别人拿到可执行文件对它class-dump出来的结果都是混淆后的类和方法名，就无法从类和方法名中猜出某个方法是做什么的，就难以挂钩子进行hack。不过这样做有个缺点，就是crash堆栈反解出来的堆栈方法名会是混淆后的，需要再加一层混淆->原名的转换，实现和使用成本有点高。
实际上这部分占用的长度比较小，中型项目也就几百K，对安全性要求高的情况可以试试。</p>

<h3>冗余字符串</h3>

<p>代码上定义的所有静态字符串都会记录在在可执行文件的__cstring段，如果项目里Log非常多，这个空间占用也是可观的，也有几百K的大小，可以考虑清理所有冗余的字符串。另外如果有特别长的字符串，建议抽离保存成静态文件，因为AppStore对可执行文件加密导致压缩率低，特别长的字符串抽离成静态资源文件后压缩率会比在可执行文件里高很多。</p>

<h3>列一个清单</h3>

<p><img src="http://7xopon.com1.z0.glb.clouddn.com/2015121403.png" alt="效果展示" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App可执行文件瘦身(一)]]></title>
    <link href="http://macro44.github.io/blog/2015/12/14/ios-appke-zhi-xing-wen-jian-shou-shen-%5B%3F%5D/"/>
    <updated>2015-12-14T16:17:28+08:00</updated>
    <id>http://macro44.github.io/blog/2015/12/14/ios-appke-zhi-xing-wen-jian-shou-shen-[?]</id>
    <content type="html"><![CDATA[<div class="text" style="text-align:center;"><font size=6 color=red>iOS App可执行文件的组成</font></div>


<blockquote><p>面试的时候遇到的面试题，如何给App瘦身，之前有看过类似的题目，讲的大概就是两个方面，一、给资源文件瘦身，2、能下载处理的尽量通过后续下载来处理。但没有实际操作过。所以总感觉回答的不是那么个味道。回来问同事以及查资料后果然，需要两个方面来瘦身：1、减少资源包的大小；2、减少可执行文件的大小。1在本博客后续博客中会提到如何瘦身，本文主要讲解可执行文件瘦身的一部分，App可执行文件的组成；</p></blockquote>

<!--more-->


<p><a href="http://blog.cnbang.net/tech/2296/">转载于bang&rsquo;s blog </a></p>

<h3>查看App可执行文件组成的方法</h3>

<ol>
<li><p>XCode开启编译选项Write Link Map File
Xcode -> Project -> Build Setting ->搜索map ->设置Write Link Map File为Yes<br/>
<img src="http://7xopon.com1.z0.glb.clouddn.com/2015121401.png" alt="展示图片" /></p></li>
<li><p>编译后，通过路径查找找到图中txt文件对应的文件
具体路径: ~/Library/Developer/Xcode/DerivedData/XXX-xxxxxxxxxxxx/Build/Intermediates/XXX.build/Debug-iphoneos/XXX.build/XXX-LinkMap-xxx.txt<br/>
（这个LinkMap展示了整个App中可执行文件的全貌，列出了编译后的每一个.o文件，包括.a文件里的，以及每一个目标文件的代码段，数据段存储详情等）</p></li>
<li><p>以我目前手上的项目为例，在linkMap中的文件列表，有部分删减，为了方便讲解
<img src="http://7xopon.com1.z0.glb.clouddn.com/2015121402.png" alt="展示图片" /></p>

<p>  第一部分(Object files部分)含义：<br/>
  前面中括号表示文件的编号，在后面的部分中会用到,后面表示可执行文件的位置</p>

<p>  第二部分(Sections部分)含义:<br/>
  Address表示偏移位置,Size表示大小,Segment表示段类型(<code>__TEXT</code>,保存程序代码段编译后的机器码，<code>__Data</code>),Section表示段名称(<code>__text</code>表示编译后的程序可执行语句，<code>__data</code>表示已初始化的全局变量和局部静态变量，<code>__bss</code>表示未初始化的全局变量和局部静态变量,<code>__csstring</code>表示代码里的字符串常量)</p>

<p>  可以发现每一行的数据都是紧跟在上一行数据后面， 即第二行到Address为第一行的Address加上第二行的Size组成</p>

<p>  第三部分(symbols部分)含义:
  Address 表示偏移位置,第二部分表示占用大小,第三部分表示所属文件序号，对应上述Object files列表，最后是文件名称</p></li>
<li><p>使用<br/>
 在了解了可执行文件的组成后，我们可以通过计算来获取某个静态库在项目中的占比，通过将.a静态库的.o加起来，就是这个静态库可执行部分占整个app空间的大小。（但是需要注意，此大小并不等于静态库的物理大小，此大小只是可执行文件的大小，要小于静态库的物理大小）</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Runloop的常见使用]]></title>
    <link href="http://macro44.github.io/blog/2015/12/09/runloopde-chang-jian-shi-yong/"/>
    <updated>2015-12-09T16:32:18+08:00</updated>
    <id>http://macro44.github.io/blog/2015/12/09/runloopde-chang-jian-shi-yong</id>
    <content type="html"><![CDATA[<blockquote><p>在之前就做过倒计时的功能，最近封装了一个倒计时的控件，之前一直是用第三方库，没有仔细的去了解原理，最近刚好有时间，就研究了一下NSTimer这个类，在研究的过程中，就发现了，NSTimer需与NSRunLoop结合起来玩的才溜，于是就有了这一篇，在我之前项目中遇到的runloop使用以及结合相关资料的总结;这是第一部分，接下来会在另一篇博客中讲解runloop的原理，以及我对runloop的理解。</p></blockquote>

<!--more-->


<h3>用于“暂停”程序</h3>

<pre><code>- (void)start{
    NSLog(@"start new thread …");
    [NSThread detachNewThreadSelector:@selector(runOnNewThread) toTarget:self withObject:nil];
    while (!end) {
        NSLog(@"runloop…");
    ① [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];
        NSLog(@"runloop end.");
    }
    NSLog(@"ok.");

}

- (void)runOnNewThread{
    NSLog(@"run for new thread …");
    sleep(1);
    ② [self performSelectorOnMainThread:@selector(setEnd) withObject:nil waitUntilDone:NO];
    NSLog(@"end.");
}

- (void)setEnd{
    end=YES;
}
</code></pre>

<p>调用start方法，输出结果为</p>

<pre><code>2015-12-09 15:42:14.828 Test1[1648:451473] start new thread …
2015-12-09 15:42:14.829 Test1[1648:451473] runloop…
2015-12-09 15:42:14.829 Test1[1648:451585] run for new thread …
2015-12-09 15:42:15.829 Test1[1648:451585] end.
2015-12-09 15:43:00.010 Test1[1648:451473] runloop end.
2015-12-09 15:43:00.010 Test1[1648:451473] ok.
</code></pre>

<p>解释一下为什么要调用②，因为在调用此方法会向主线程发送消息，唤醒runloop，从而及时响应任务；</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;从上面的代码中不难看出，函数的调用顺序，runloop之前的部分 －> newThread部分 －> runloop之后的部分;这样就相当于帮我们形成了一个线程阻塞，但是while循环不受影响，<br/>
<font color=blue size=3>[常见应用场景:]</font>newThread处理网络请求，runloop前后控制是否显示进度菊花</p>

<p></br></p>

<h3>在使用NSTimer的同时使用NSRunloop</h3>

<p>①当使用<a href=#2015120901> scheduledTimerWithTimeInterval:invocation:repeats: </a> 和 <a href=#2015120902> scheduledTimerWithTimeInterval:target:selector:userInfo:repeats: </a>创建NSTimer实例的时候，使用的mode为NSDefaultRunLoopMode</p>

<p>②当使用<a href=#2015120903> timerWithTimeInterval:invocation:repeats: </a> 和 <a href=#2015120904> timerWithTimeInterval:target:selector:userInfo:repeats: </a> 创建NSTimer实例的时候需要结合NSRunLoop类的 <a href=#2015120905> addTimer:forMode: </a> 方法将timer添加进runloop</p>

<p>③当使用<a href=#2015120906> initWithFireDate:interval:target:selector:userInfo:repeats: </a> 创建NSTimer实例的时候需要结合NSRunLoop类的 <a href=#2015120905> addTimer:forMode: </a> 方法将timer添加进runloop</p>

<p>在某些复杂页面，可能出现NSTimer计时延误的情况，有以下两条思路解决这个问题，1、在子线程中进行NSTimer的操作；2、仍然在主线程中进行NSTimer操作，但是将NSTimer加入到main runloop的特定的mode中；<br/>
</br>
方法1：</p>

<pre><code> if (self.timer) {
     [self.timer invalidate];
     self.timer = nil;
 }
 self.timer = [NSTimer timerWithTimeInterval:0.01 target:self selector:@selector(addTime) userInfo:nil repeats:YES];
 [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];
</code></pre>

<p>方法2:</p>

<pre><code>创建线程
 NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(newThread) object:nil];
 [thread start];

 //在子线程中做的事情 
-  (void)newThread
 {
     @autoreleasepool
    {
         [NSTimer scheduledTimerWithTimeInterval:2.0 target:self selector:@selector(addTime) userInfo:nil repeats:YES];
        [[NSRunLoop currentRunLoop] run];
     }
}
</code></pre>

<p>方法3:</p>

<pre><code>//声明全局变量
 dispatch_source_t _timers;


 uint64_t interval = 0.01 * NSEC_PER_SEC;
 dispatch_queue_t queue = dispatch_queue_create("my queue", 0);
 _timers = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue);
 dispatch_source_set_timer(_timers, dispatch_time(DISPATCH_TIME_NOW, 0), interval, 0);
  __weak ViewController *blockSelf = self;
 dispatch_source_set_event_handler(_timers, ^()
 {
     NSLog(@"Timer %@", [NSThread currentThread]);
     [blockSelf addTime];
 });
 dispatch_resume(_timers);

- (void)addTime{
    //然后在主线程中修改UI界面：
     dispatch_async(dispatch_get_main_queue(), ^{
             self.label.text = [NSString stringWithFormat:@"%.2f", self.timeCount/100];
     });
 }
</code></pre>

<p><b id=2015120901>+ scheduledTimerWithTimeInterval:invocation:repeats:</b></p>

<pre><code>+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)seconds
                             invocation:(NSInvocation *)invocation
                                repeats:(BOOL)repeats
</code></pre>

<p><b id=2015120902>+ scheduledTimerWithTimeInterval:target:selector:userInfo:repeats: </b></p>

<pre><code>+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)seconds
                                 target:(id)target
                               selector:(SEL)aSelector
                               userInfo:(id)userInfo
                                repeats:(BOOL)repeats
</code></pre>

<p><b id=2015120903>+ timerWithTimeInterval:invocation:repeats:</b></p>

<pre><code>+ (NSTimer *)timerWithTimeInterval:(NSTimeInterval)seconds
                    invocation:(NSInvocation *)invocation
                       repeats:(BOOL)repeats
</code></pre>

<p><b id=2015120904>+ timerWithTimeInterval:target:selector:userInfo:repeats:</b></p>

<pre><code>+ (NSTimer *)timerWithTimeInterval:(NSTimeInterval)seconds
                        target:(id)target
                      selector:(SEL)aSelector
                      userInfo:(id)userInfo
                       repeats:(BOOL)repeats
</code></pre>

<p><b id=2015120905>-  addTimer:forMode:</b></p>

<pre><code>- (void)addTimer:(NSTimer *)aTimer
     forMode:(NSString *)mode
</code></pre>

<p><b id=2015120906>- initWithFireDate:interval:target:selector:userInfo:repeats:</b></p>

<pre><code>- (instancetype)initWithFireDate:(NSDate *)date
                    interval:(NSTimeInterval)seconds
                      target:(id)target
                    selector:(SEL)aSelector
                    userInfo:(id)userInfo
                     repeats:(BOOL)repeats
</code></pre>

<p>  <a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/index.html#//apple_ref/occ/clm/NSTimer/scheduledTimerWithTimeInterval:invocation:repeats:">NSTimer官方参考文档</a></p>
]]></content>
  </entry>
  
</feed>
